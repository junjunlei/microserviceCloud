/**
 * 二进制及Java按位运算回顾
 * @author Jerry
 * @create 2019-08-14 14:41
 */
public class BinaryTest {
    /**
     * 正数   原码=反码=补码
     * 负数   原码 反码（符号位不变，其他位置取反） 补码（反码+1）
     * @param args
     */
    public static void main(String[] args) {
        /**
         * 按位与  &
         * 都为1时结果为1 否则为0
         *
         * 5-----> 00000000 00000000 00000000 00000101
         * 4-----> 00000000 00000000 00000000 00000100
         */
        int a=5&4;    //00000000 00000000 00000000 00000100  ---->4
        /**
         * 按位或  | 相同位有一个为1 则为1
         */
        int b=5|4;   //00000000 00000000 00000000 00000101  --->5
        /**
         * 按位异或 ^ 相同位相同则为0 不同则为1 （所以0异或任何数都是这个数本身）
         */
        int c=5^4;   //00000000 00000000 00000000 00000001  ---->1
        /**
         * 取反运算符 ~  结论 ~x=-(x+1)
         *
         * 5的原码 00000000  00000000 00000000 00000101
         * (~5)=11111111  11111111 11111111 11111010(二进制中负数以补码形式存)
         * 11111111  11111111 11111111 11111001（变成反码）
         * 10000000  00000000 00000000 00000110（变成原码）=-6
         *
         * 负数补码的原码=取反+1+最高位变为1
         */
        int d=~5;   // ---->1....  0000101 --->1...0000110
        /**
         * 左移运算符  <<
         * 5-----> 00000000 00000000 00000000 00000101
         * 左移---->0000000  00000000 00000000 00010100 =20
         */
        int e=5<<2;
        /**
         * 有符号右移操作符  >>
         * 符号为正（0） 高位插0
         * 符号位负高位插1
         * 5-----> 00000000 00000000 00000000 00000101
         * 右移----->00000000 00000000 00000000 00000001=1
         * -5-----> 11111111 11111111 11111111 11111011(负数是补码存储)
         * 右移---> 11111111 11111111 11111111 11111110(10000000 00000000 00000000 00000010(原码))=-2
         */
        int f=5>>2;
        int g=-5>>2;
        /**
         * java中增加了一种“无符号”右移位操作符（>>>）,他使用“零扩展”
         * 无论正负，都在高位插入0。
         * 这一操作符是C或C++中所没有的。
         * -5-----> 11111111 11111111 11111111 11111011(负数是补码存储)
         * 无符号右移 --->00111111 11111111 11111111 11111110(变成了正数)
         */
        int h=-5>>>2;  //1073741822
        System.out.println(h);

    }
}
